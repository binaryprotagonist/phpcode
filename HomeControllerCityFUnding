<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Subscription;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\CompanyExport;
use App\Models\User;
use App\Models\Company;
use App\Models\CompanyUser;
use App\Models\PricePaid;
use App\Models\LandAndRegisteredCompany;
use Auth;
use DB;

class HomeController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth')->except(['index','search','officers','company','exportOfficer','exportCompany','exportPorfolio','importFile','importFileStore']);
    }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function index(Request $request){
       return view('index');
    }
    
    /**
     * Get Profile Page
     */
    public function profile(){
      return view('profile');
    }

    /**
     * Get Setting Page
     */
    public function setting(){
      return view('setting');
    }

    /**
     * Search Page
     */
    public function search(Request $request){

       $header = [
          "authorization: 4d7c5b9d-3ff3-472d-80a7-3e44cee9563d",
          "content-type: application/json",
          "accept: application/json",
       ];
        
        $q = $request->q;
        $items_per_page = 100;
        $page = $request->page ?? 0;
        $start_index  = $items_per_page * $page;
        $totalItems = [];
        $items = [];

        for($i = 0; $i<10; $i++){
              $start_index = $items_per_page * $i;
              $records = $this->fetch('https://api.companieshouse.gov.uk/search','GET',['q'=>$q,'items_per_page'=>$items_per_page,'start_index'=>$start_index],$header);
              if($records->items){
                $totalItems = array_merge($totalItems,$records->items);
              }
              if(count($records->items) < 100){
                 break;
              }
        }
       
        foreach($totalItems as $record){
             $dob = null;
             $ddate = null;
             if(isset($record->date_of_birth) && !empty($record->date_of_birth)){
                $dob = $record->date_of_birth->month .'-'. $record->date_of_birth->year;
                $ddate = $record->date_of_birth->year .'-'. sprintf("%02d", $record->date_of_birth->month) .'-'. '01';
             }

             if($request->month){
                 if(strtolower(date('M',strtotime($ddate))) != strtolower($request->month)){
                   continue;
                 }
             }

             if($request->year){
               if(strtolower(date('Y',strtotime($ddate))) != strtolower($request->year)){
                 continue;
               }
             }

            array_push($items,[
               'self' => $record->links->self,
               'company_number' => $record->company_number ?? NULL,
               'appointment_count' => $record->appointment_count ?? NULL,
               'title' => $record->title ?? NULL,
               'description' => $record->description ?? NULL,
               'address' => $record->address_snippet ?? NULL,
               'dob'    => $dob,
               'ddate'  => $ddate
            ]);
        }

        $data = [
          'items_per_page' => $records->items_per_page,
          'page_number' => $records->page_number,
          'total_results' => $records->total_results,
          'items' => $items,
          'start_index' => $records->start_index
        ];

        return view('search',$data);
    }

    /**
     * Search Officer Page
     */
    public function officers($id){
      
      $header = [
         "authorization: 4d7c5b9d-3ff3-472d-80a7-3e44cee9563d",
         "content-type: application/json",
         "accept: application/json",
      ];

       $officer = $this->fetch('https://api.companieshouse.gov.uk/officers/'.$id.'/appointments','GET',[],$header);

       if($officer->items){
          $storeCompanyData     = [];
          $storeUserCompanyData = [];
          $compamyNumbers       = [];

        foreach($officer->items as $key => $item){
          $pricePaid = LandAndRegisteredCompany::where('postcode',$postCode)->whereRaw('LOWER(street) like ?', '%'.strtolower(trim($street)).'%')->orderBy('id','desc')->first();
          $ownerShipData = $this->fetch('https://api.companieshouse.gov.uk/company/'.$item->appointed_to->company_number.'/persons-with-significant-control','GET',[],$header);
          $street    =  $company->registered_office_address->address_line_1;
          $postCode  = $company->registered_office_address->postal_code;
          $ownerShip = $ownerShipData->items[0]->natures_of_control[0] ?? NULL;
          $pricePaid = PricePaid::where('postcode',$postCode)->whereRaw('LOWER(street) like ?', '%'.strtolower(trim($street)).'%')->orderBy('id','desc')->first();
          $officer->items[$key]->purchase_price = $pricePaid->price ?? NULL;
          $officer->items[$key]->purchase_date  = $pricePaid->date_of_transfer ?? NULL;
          $officer->items[$key]->ownership      = $ownerShip ?? NULL;
          array_push($compamyNumbers,$item->appointed_to->company_number); 
          array_push($storeCompanyData,[
             'company_number' => $item->appointed_to->company_number,
             'address'        => $item->address->address_line_1 ?? '' .','. $item->address->locality ?? '' .','. $item->address->region ?? '' .','. $item->address->country ?? '',
             'owners_name'    => $item->appointed_to->company_name,
            'purchase_price'  => $pricePaid->price ?? NULL,
            'purchase_date'   => $pricePaid->date_of_transfer ?? NULL,
            'ownership'       => $ownerShip ?? NULL
          ]);
          array_push($storeUserCompanyData,[
            'user_id'  => \Auth::id(),
            'company_number' => $item->appointed_to->company_number,
            'officer_id' => $id
          ]);
        }
          DB::beginTransaction();
        try{
          Company::whereIn('company_number',$compamyNumbers)->delete();
          CompanyUser::where('user_id',\Auth::id())->whereIn('company_number',$compamyNumbers)->delete();
          Company::insert($storeCompanyData);
          CompanyUser::insert($storeUserCompanyData);
          DB::commit();
        }catch(\Exception $e){
          DB::rollback();
        }
      }
      return $officer;$data = [
         'officer' => $officer ?? array(),
         'id'      => $id
       ];
       return view('officer',$data);
   }

    /**
     * Search Company Page
     */
    public function company($id){

      $header = [
         "authorization: 4d7c5b9d-3ff3-472d-80a7-3e44cee9563d",
         "content-type: application/json",
         "accept: application/json",
      ];

       $company = $this->fetch('https://api.companieshouse.gov.uk/company/'.$id,'GET',[],$header);
       $officer = $this->fetch('https://api.companieshouse.gov.uk/company/' . $id .'/officers','GET',[],$header);
       $totalItems   = [];

       foreach($officer->items as $key => $item){
            $records = $this->fetch('https://api.companieshouse.gov.uk' . $item->links->officer->appointments,'GET',[],$header);
            if($records->items){
              $totalItems = array_merge($totalItems,$records->items);
            }
       }

       foreach($totalItems as $key => $item){
          $totalItems[$key]->purchase_price = NULL;
          $totalItems[$key]->purchase_date  = NULL;
          $totalItems[$key]->ownership      = NULL;
       }

            $storeCompanyData     = [];
            $storeUserCompanyData = [];
            $compamyNumbers       = [];
            foreach($totalItems as $key => $item){

              $temcompany    = $this->fetch('https://api.companieshouse.gov.uk/company/'.$item->appointed_to->company_number,'GET',[],$header);
              $ownerShipData = $this->fetch('https://api.companieshouse.gov.uk/company/'.$item->appointed_to->company_number.'/persons-with-significant-control','GET',[],$header);
              $ownerShip = $ownerShipData->items[0]->natures_of_control[0] ?? NULL;
              $street    = $temcompany->registered_office_address->address_line_1;
              $postCode  = $temcompany->registered_office_address->postal_code;
              $pricePaid = DB::table('price_paids')->WhereRaw("MATCH(street) AGAINST('$street' IN BOOLEAN MODE) AND postcode = '$postCode' ORDER BY id DESC")->first();
              $totalItems[$key]->purchase_price = $pricePaid->price ?? NULL;
              $totalItems[$key]->purchase_date  = $pricePaid->date_of_transfer ?? NULL;
              $totalItems[$key]->ownership      = $owerShip ?? NULL;

              array_push($compamyNumbers,$item->appointed_to->company_number); 
              array_push($storeCompanyData,[
                  'company_number' => $item->appointed_to->company_number,
                  'address'        => $item->address->address_line_1 ?? '' .','. $item->address->locality ?? '' .','. $item->address->region ?? '' .','. $item->address->country ?? '',
                  'owners_name'    => $item->appointed_to->company_name,
                  'purchase_price' => $pricePaid->price ?? NULL,
                  'purchase_date'  => $pricePaid->date_of_transfer ?? NULL,
                  'ownership' => $owerShip ?? NULL
              ]);
              array_push($storeUserCompanyData,[
                'user_id'  => \Auth::id(),
                'company_number' => $item->appointed_to->company_number
              ]);
            }
            DB::beginTransaction();
            try{
              Company::whereIn('company_number',$compamyNumbers)->delete();
              CompanyUser::where('user_id',\Auth::id())->whereIn('company_number',$compamyNumbers)->delete();
              Company::insert($storeCompanyData);
              CompanyUser::insert($storeUserCompanyData);
              DB::commit();
            }catch(\Exception $e){
              DB::rollback();
            }
       $data = [
         'company' => $company,
         'officers' => $totalItems ?? array(),
         'id' => $id
       ];

       return view('company',$data);
   }

     public function exportOfficer($officerId=null){
      $compamyUserData = CompanyUser::where('officer_id',$officerId)->get();
      $companies = Company::whereIn('company_number',array_column($compamyUserData->toarray(),'company_number'))->get();
      return Excel::download(new CompanyExport($companies->toarray()), 'companies-'.date('Y-M-d').'.xlsx');
     }

     public function exportCompany($companyNumber){
      $compamyUserData = CompanyUser::where('company_number',$companyNumber)->get();
      $companies = Company::whereIn('company_number',array_column($compamyUserData->toarray(),'company_number'))->get();
      return Excel::download(new CompanyExport($companies->toarray()), 'companies-'.date('Y-M-d').'.xlsx');
     }

   public function exportPorfolio($companyNumber=null){
      $companyNumbers = CompanyUser::where('user_id',Auth::id())->get();
      $companies = Company::whereIn('company_number',array_column($companyNumbers->toarray(),'company_number'))->get();
      return Excel::download(new CompanyExport($companies->toarray()), 'companies-'.date('Y-M-d').'.xlsx');
   }

   public function portfolio(){
      $companyNumbers = CompanyUser::where('user_id',Auth::id())->get();
      $companies      = Company::whereIn('company_number',array_column($companyNumbers->toarray(),'company_number'))->orderBy('id','desc')->get();
      $data = ['companies' => $companies];
      return view('portfolio',$data);
   }

   public function importFile(Request $request){
      //  $filename = public_path('pp-2021.csv1');
      //  ini_set('auto_detect_line_endings', TRUE);
      //  ini_set('max_execution_time', 0);
      //  $storeData    = collect();
      //  $rowStored    = 540000;
      //  $rowStart     = 540001;
      //  $rowEnd       = 560000;
      //  $counter      = 1;
      //  if (($handle = fopen($filename, "r")) !== FALSE) {
      //   while (($row_data = fgetcsv($handle)) !== FALSE) {

      //     if($counter > $rowEnd){
      //            break;
      //     }

      //     if($counter >= $rowStart && $counter <= $rowEnd ){
      //         $storeData->push([
      //           'transaction_unique_identifier' => $row_data['0'],
      //           'price' => $row_data['1'],
      //           'date_of_transfer' => $row_data['2'],
      //           'postcode' => $row_data['3'],
      //           'property_type' => $row_data['4'],
      //           'old_new' => $row_data['5'],
      //           'duration' => $row_data['6'],
      //           'paon' => $row_data['7'],
      //           'saon' => $row_data['8'],
      //           'street' => $row_data['9'],
      //           'locality' => $row_data['10'],
      //           'city' => $row_data['11'],
      //           'district' => $row_data['12'],
      //           'county' => $row_data['13'],
      //           'ppd_category_type' => $row_data['14'],
      //           'record_status_monthly_file_only' => $row_data['15'],
      //         ]);
      //     }

      //     $counter++;

      //   }
      //   fclose($handle);
      // }

      // foreach ($storeData->chunk(1000) as $chunk){
      //   DB::table('price_paids')->insert($chunk->toarray());
      // }

      // return 'Success';

      //INSERT INTO land_and_registered_companies (title_number,tenure,property_address,district,country,region,postcode,multiple_address_indicator,price_paid,proprietor_name_1,company_registration_no_1,proprietorship_category_1,proprietor_1_address_1,proprietor_1_address_2,proprietor_1_address_3,proprietor_name_2,company_registration_no_2,proprietorship_category_2,proprietor_2_address_1,proprietor_2_address_2,proprietor_2_address_3,proprietor_name_3,company_registration_no_3,proprietorship_category_3,proprietor_3_address_1,proprietor_3_address_2,proprietor_3_address_3,proprietor_name_4,company_registration_no_4,proprietorship_category_4,proprietor_4_address_1,proprietor_4_address_2,proprietor_4_address_3,date_proprietor_added,additional_proprietor_indicator) VALUES
     /************************************ Previous Code */
    }

   public function importFileStore(Request $request){


   }

   function _csv_row_count($filename) {
    ini_set('auto_detect_line_endings', TRUE);
    $row_count = 0;
    if (($handle = fopen($filename, "r")) !== FALSE) {
      while (($row_data = fgetcsv($handle, 2000, ",")) !== FALSE) {
        $row_count++;
      }
      fclose($handle);
      // Exclude the headings.
      $row_count--;
      return $row_count;
    }
  }


}
